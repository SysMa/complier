/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. XYZGrammar.jj */
/*@egen*//**
 * JJTree template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */options{  JDK_VERSION = "1.5";  static = false;}PARSER_BEGIN(XYZCompiler)
package com.lexAndParse;
import java.util.HashMap;
import java.util.Map;

public class XYZCompiler/*@bgen(jjtree)*/implements XYZCompilerTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected JJTXYZCompilerState jjtree = new JJTXYZCompilerState();

/*@egen*/  public static void main(String args [])  {    System.out.println("Reading from standard input...");    System.out.print("Enter an expression like \"1+(2+3)*var;\" :");
    Map<String, Integer> tokenCountMap = new HashMap<String, Integer>();
    StringBuffer tokenStr = new StringBuffer("");    XYZCompiler xyzc = new XYZCompiler(System.in);    try    {      SimpleNode n = xyzc.program(tokenCountMap, tokenStr);      n.dump("");      System.out.println("Thank you.");
      System.out.println(tokenCountMap);    }    catch (Exception e)    {      System.out.println("Oops.");      System.out.println(e.getMessage());    }  }}PARSER_END(XYZCompiler)SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
| "\r\n"
| < "//"(~["\n", "\r"])*("\n" | "\r" | "\r\n") > // note of '//' 
| < "/*"(~["*"])*"*"(~["/"](~["*"])*"*")*"/" > // note of '/**/'
}

TOKEN: /* Integer literals */
{
  < INTEGER_LITERAL : ["1"-"9"](< DIGIT >)* | "0" >
}

TOKEN: /* Long literals */
{
  < LONG_LITERAL : < INTEGER_LITERAL >"L" >
}

TOKEN: /* Keywords */
{
  < LPAREN : "(" >
| < RPAREN : ")" >
| < LSQPAREN : "[" >
| < RSQPAREN : "]" >
| < LBRACE : "{" >
| < RBRACE : "}" >
| < SEMICOLON : ";" >
| < DOT : "." >
| < ASSIGN : "<=" >
| < LESSTHAN : "<" >
| < LARGERTHAN : ">">
| < PLUS : "+" >
| < MINUS : "-" >
| < MUL :"*">
| < DIVISION : "/">
| < AND : "&&" > 
| < OR : "||">
| < NOT : "!" > 
| < COMMA : ",">
| < COLON : ":">
| < BOOLEAN : "boolean" > 
| < CLASS : "class" >
| < ELSE : "else" >
| < EXTENDS : "extends" >
| < FALSE : "false" >
| < IF : "if" >
| < WHILE : "while" >
| < INTEGER : "int" > 
| < LONG : "long" >
| < NEW : "new" >
| < RETURN : "return" >
| < STATIC : "static" >
| < THIS : "this" >
| < TRUE : "true" >
| < VOID : "void" > 
| < PRE : "pre">
| < POST : "post">

| < LENGTH : "length" >
| < MAIN : "main" >
}

TOKEN: /* Identifiers */
{
  < ID : < LETTER >
| < LETTER >(< LETTER > | < DIGIT > | < UNDERSCORE >)* >
| < #DIGIT : [ "0"-"9" ] >
| < #LETTER : ["a"-"z", "A"-"Z"] >
| < #UNDERSCORE : "_" >
}SimpleNode program(Map<String, Integer> tokenCountMap,
				   StringBuffer tokenStr)         :
{/*@bgen(jjtree) Program */
  SimpleNode jjtn000 = new SimpleNode(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Integer weight = 0;
  Integer subWeight = 0;
}
{/*@bgen(jjtree) Program */
  try {
/*@egen*/
  subWeight = mainClass(tokenCountMap, tokenStr)
  {
    weight += subWeight;  }
  (
    subWeight = classDecl(tokenCountMap, tokenStr)
    {
      weight += subWeight;    }
  )*
  {
    tokenCountMap.put("$weight$", weight);
    return jjtn000;
  }
  < EOF >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

Integer mainClass(Map<String, Integer> tokenCountMap, StringBuffer tokenStr)           :
{/*@bgen(jjtree) MainClass */
  SimpleNode jjtn000 = new SimpleNode(JJTMAINCLASS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Integer subWeight = 0;
  Integer temp;
}
{/*@bgen(jjtree) MainClass */
  try {
/*@egen*/
  _class(tokenCountMap, tokenStr) id(tokenCountMap, tokenStr)
  < LBRACE >{tokenStr.append("LBRACE({)\n");}
  (
    temp = varOrMethodDecl(tokenCountMap, tokenStr)
    {
      subWeight += temp;    }
  )*
  _static(tokenCountMap, tokenStr) _void(tokenCountMap, tokenStr)
  _main(tokenCountMap, tokenStr)
  < LPAREN >{tokenStr.append("LPAREN(() ");}
  < RPAREN >{tokenStr.append("RPAREN()) ");}
  < LBRACE >{tokenStr.append("LBRACE({)\n");}
  (
    temp = statement(tokenCountMap, tokenStr)
    {
      subWeight += temp;    }
  )*
  < RBRACE >{tokenStr.append("RBRACE(})\n");}
  < RBRACE >{tokenStr.append("RBRACE(})\n");}/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return subWeight;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

Integer classDecl(Map<String, Integer> tokenCountMap, StringBuffer tokenStr)           :
{/*@bgen(jjtree) ClassDecl */
  SimpleNode jjtn000 = new SimpleNode(JJTCLASSDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Integer subWeight = 0;
  Integer temp;
}
{/*@bgen(jjtree) ClassDecl */
  try {
/*@egen*/
  _class(tokenCountMap, tokenStr) id(tokenCountMap, tokenStr)
  (_extends(tokenCountMap, tokenStr) id(tokenCountMap, tokenStr))?
  < LBRACE >{tokenStr.append("LBRACE({)\n");}
  (
    temp = varOrMethodDecl(tokenCountMap, tokenStr)
    {
      subWeight += temp;    }
  )*
  < RBRACE >{tokenStr.append("RBRACE(})\n");}/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return subWeight;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

Integer varOrMethodDecl(Map<String, Integer> tokenCountMap, StringBuffer tokenStr)                 :
{/*@bgen(jjtree) VarOrMethodDecl */
  SimpleNode jjtn000 = new SimpleNode(JJTVARORMETHODDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Integer subWeight = 0;
  Integer temp;
}
{/*@bgen(jjtree) VarOrMethodDecl */
  try {
/*@egen*/
  (type(tokenCountMap, tokenStr) | id(tokenCountMap, tokenStr))
  id(tokenCountMap, tokenStr)
  (
    (
      < SEMICOLON >{tokenStr.append("SEMICOLON(;)\n");}
    | assign(tokenStr)
      (
        exp(tokenCountMap, tokenStr)
      | < LSQPAREN >{tokenStr.append("LSQPAREN([) ");}
        expList(tokenCountMap, tokenStr)
        < RSQPAREN >{tokenStr.append("RSQPAREN(]) ");}
      ) < SEMICOLON >{tokenStr.append("SEMICOLON(;)\n");}
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
      return 1;    }
  | (
	  < LPAREN >{tokenStr.append("LPAREN(() ");}
	  formalList(tokenCountMap, tokenStr)
	  < RPAREN >{tokenStr.append("RPAREN()) ");}
	  < LBRACE >{tokenStr.append("LBRACE({)\n");}
	  preDecl(tokenCountMap, tokenStr) postDecl(tokenCountMap, tokenStr)
	  (
	  	temp = statement(tokenCountMap, tokenStr)
	  	{	  	  subWeight += temp;
	  	}
	  )*
	  _return(tokenCountMap, tokenStr)
	  exp(tokenCountMap, tokenStr)
	  {
	  	subWeight += 1;	  }
	  < SEMICOLON >{tokenStr.append("SEMICOLON(;)\n");}
	  < RBRACE >{tokenStr.append("RBRACE(})\n");}
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
	  return subWeight;
	}
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

Integer mid_varDecl(Map<String, Integer> tokenCountMap, StringBuffer tokenStr)             :
{/*@bgen(jjtree) Mid_VarDecl */
  SimpleNode jjtn000 = new SimpleNode(JJTMID_VARDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Mid_VarDecl */
  try {
/*@egen*/
  type(tokenCountMap, tokenStr) id(tokenCountMap, tokenStr)
  (
    < SEMICOLON >{tokenStr.append("SEMICOLON(;)\n");}
  | assign(tokenStr)
    (
      exp(tokenCountMap, tokenStr)
    | < LSQPAREN >{tokenStr.append("LSQPAREN([) ");}
      expList(tokenCountMap, tokenStr)
      < RSQPAREN >{tokenStr.append("RSQPAREN(]) ");}
    ) < SEMICOLON >{tokenStr.append("SEMICOLON(;)\n");}
  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return 1;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void formalList(Map<String, Integer> tokenCountMap, StringBuffer tokenStr)            :
{/*@bgen(jjtree) FormalList */
  SimpleNode jjtn000 = new SimpleNode(JJTFORMALLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FormalList */
  try {
/*@egen*/
  (type(tokenCountMap, tokenStr) | id(tokenCountMap, tokenStr))
  id(tokenCountMap, tokenStr)
  (< COMMA >{tokenStr.append("COMMA(,) ");}
  (
    type(tokenCountMap, tokenStr)
  | id(tokenCountMap, tokenStr)) id(tokenCountMap, tokenStr
  ))*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void preDecl(Map<String, Integer> tokenCountMap, StringBuffer tokenStr)         :
{/*@bgen(jjtree) PreDecl */
  SimpleNode jjtn000 = new SimpleNode(JJTPREDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PreDecl */
  try {
/*@egen*/
  pre(tokenCountMap, tokenStr) < COLON >{tokenStr.append("COLON(:) ");}
  exp(tokenCountMap, tokenStr) < SEMICOLON >/*@bgen(jjtree)*/
                                            {
                                              jjtree.closeNodeScope(jjtn000, true);
                                              jjtc000 = false;
                                            }
/*@egen*/{tokenStr.append("SEMICOLON(;)\n");}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void postDecl(Map<String, Integer> tokenCountMap, StringBuffer tokenStr)          :
{/*@bgen(jjtree) PostDecl */
  SimpleNode jjtn000 = new SimpleNode(JJTPOSTDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PostDecl */
  try {
/*@egen*/
  post(tokenCountMap, tokenStr) < COLON >{tokenStr.append("COLON(:) ");}
  exp(tokenCountMap, tokenStr) < SEMICOLON >/*@bgen(jjtree)*/
                                            {
                                              jjtree.closeNodeScope(jjtn000, true);
                                              jjtc000 = false;
                                            }
/*@egen*/{tokenStr.append("SEMICOLON(;)\n");}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void type(Map<String, Integer> tokenCountMap, StringBuffer tokenStr)      :
{/*@bgen(jjtree) Type */
  SimpleNode jjtn000 = new SimpleNode(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Type */
  try {
/*@egen*/
  integer(tokenCountMap, tokenStr)
  (< LSQPAREN >{tokenStr.append("LSQPAREN([) ");}
   < RSQPAREN >{tokenStr.append("RSQPAREN(]) ");})?
| _long(tokenCountMap, tokenStr)
  (< LSQPAREN >{tokenStr.append("LSQPAREN([) ");}
   < RSQPAREN >{tokenStr.append("RSQPAREN(]) ");})?
| _boolean(tokenCountMap, tokenStr)/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

Integer statement(Map<String, Integer> tokenCountMap, StringBuffer tokenStr)           :
{/*@bgen(jjtree) Statement */
  SimpleNode jjtn000 = new SimpleNode(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Integer temp;
  Integer subWeight = 0;
}
{/*@bgen(jjtree) Statement */
  try {
/*@egen*/
  subWeight = mid_varDecl(tokenCountMap, tokenStr)/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return subWeight;  }
| < LBRACE >{tokenStr.append("LBRACE({) ");}
  (
    temp = statement(tokenCountMap, tokenStr)
    {
      subWeight += temp;    }
  )*
  < RBRACE >/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
            }
/*@egen*/{tokenStr.append("RBRACE(}) ");return subWeight;}
| _if(tokenCountMap, tokenStr)
  < LPAREN > {tokenStr.append("LPAREN(() ");} exp(tokenCountMap, tokenStr)
  < RPAREN > {tokenStr.append("RPAREN()) ");}
  temp = statement(tokenCountMap, tokenStr)
  {
    subWeight = temp;  }
  _else(tokenCountMap, tokenStr)
  temp = statement(tokenCountMap, tokenStr)/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    subWeight += temp;
    subWeight = subWeight * 2;
    return subWeight;  }
| _while(tokenCountMap, tokenStr)
  < LPAREN >{tokenStr.append("LPAREN(() ");} exp(tokenCountMap, tokenStr)
  < RPAREN >{tokenStr.append("RPAREN()) ");}
  temp = statement(tokenCountMap, tokenStr)/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    subWeight = temp * 4;
    return subWeight;  }
| id(tokenCountMap, tokenStr)
  (
    (
      id(tokenCountMap, tokenStr)
      (
        < SEMICOLON >{tokenStr.append("SEMICOLON(;)\n");}
        | assign(tokenStr)
        (
          exp(tokenCountMap, tokenStr)
        | < LSQPAREN >{tokenStr.append("LSQRAREN([) ");}
          expList(tokenCountMap, tokenStr)
          < RSQPAREN >{tokenStr.append("RSQPAREN(]) ");}
        ) < SEMICOLON >{tokenStr.append("SEMICOLON(;)\n");}
      )
    )
  | (
      (assign(tokenStr) exp(tokenCountMap, tokenStr) < SEMICOLON >)
    | (
      < LSQPAREN >{tokenStr.append("LSQPAREN([) ");}
      exp(tokenCountMap, tokenStr)
      < RSQPAREN >{tokenStr.append("RSQPAREN(]) ");}
      assign(tokenStr) exp(tokenCountMap, tokenStr)
      < SEMICOLON >{tokenStr.append("SEMICOLON(;)\n");})
  	)
  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return 1;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void exp(Map<String, Integer> tokenCountMap, StringBuffer tokenStr)     :
{/*@bgen(jjtree) Exp */
  SimpleNode jjtn000 = new SimpleNode(JJTEXP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Exp */
  try {
/*@egen*/
  _new(tokenCountMap, tokenStr)
  (
    (
      (integer(tokenCountMap, tokenStr)
    | _long(tokenCountMap, tokenStr))
      < LSQPAREN >{tokenStr.append("LSQPAREN([) ");}
      exp(tokenCountMap, tokenStr)
      < RSQPAREN >/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/{tokenStr.append("RSQPAREN(]) ");}
    )
  | (id(tokenCountMap, tokenStr)
    < LPAREN >{tokenStr.append("LPAREN(() ");}
    < RPAREN >/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/{tokenStr.append("RPAREN()) ");})
  )
| unaryExp(tokenCountMap, tokenStr)
  (
    (
      < LSQPAREN >{tokenStr.append("LSQPAREN([) ");}
      exp(tokenCountMap, tokenStr)
      < RSQPAREN >/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/{tokenStr.append("RSQPAREN(]) ");}
    | dot(tokenStr)
      (
        length(tokenCountMap, tokenStr) | id(tokenCountMap, tokenStr)
        < LPAREN >{tokenStr.append("LPAREN(() ");}
        expList(tokenCountMap, tokenStr)
        < RPAREN >/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/{tokenStr.append("RPAREN()) ");}
      )
    )
  | lowLevelExp(tokenCountMap, tokenStr)
  ) 
| not(tokenStr) exp(tokenCountMap, tokenStr)/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void lowLevelExp(Map<String, Integer> tokenCountMap, StringBuffer tokenStr)             :
{/*@bgen(jjtree) LowLevelExp */
  SimpleNode jjtn000 = new SimpleNode(JJTLOWLEVELEXP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LowLevelExp */
  try {
/*@egen*/
  highLevelExp(tokenCountMap, tokenStr)
  (    (
      and(tokenStr)
    | or(tokenStr)
    | plus(tokenStr)
    | minus(tokenStr)
    )
    unaryExp(tokenCountMap, tokenStr)
    highLevelExp(tokenCountMap, tokenStr)
  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}

void highLevelExp(Map<String, Integer> tokenCountMap, StringBuffer tokenStr)              :
{/*@bgen(jjtree) HighLevelExp */
  SimpleNode jjtn000 = new SimpleNode(JJTHIGHLEVELEXP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) HighLevelExp */
  try {
/*@egen*/
  (
    (
      lessthan(tokenStr)
    | largerthan(tokenStr)
    | multi(tokenStr)
    | division(tokenStr)    )
    unaryExp(tokenCountMap, tokenStr)  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}

void unaryExp(Map<String, Integer> tokenCountMap, StringBuffer tokenStr)          :
{/*@bgen(jjtree) UnaryExp */
  SimpleNode jjtn000 = new SimpleNode(JJTUNARYEXP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) UnaryExp */
  try {
/*@egen*/
  long_literal(tokenStr)
| int_literal(tokenStr)
| _true(tokenCountMap, tokenStr)
| _false(tokenCountMap, tokenStr)
| id(tokenCountMap, tokenStr)
| _this(tokenCountMap, tokenStr)
| < LPAREN >{tokenStr.append("LPAREN(() ");}
  exp(tokenCountMap, tokenStr)
  < RPAREN >/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
            }
/*@egen*/{tokenStr.append("RPAREN()) ");}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void expList(Map<String, Integer> tokenCountMap, StringBuffer tokenStr)         :
{/*@bgen(jjtree) ExpList */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ExpList */
  try {
/*@egen*/
  exp(tokenCountMap, tokenStr)
  (< COMMA >
  {
    tokenStr.append("COMMA(,) ");  }
  exp(tokenCountMap, tokenStr))*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void long_literal(StringBuffer tokenStr)              :
{/*@bgen(jjtree) Long_Literal */
  SimpleNode jjtn000 = new SimpleNode(JJTLONG_LITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Long_Literal */
  try {
/*@egen*/
  < LONG_LITERAL >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    tokenStr.append("long_literal ");  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}
void int_literal(StringBuffer tokenStr)             :
{/*@bgen(jjtree) Int_Literal */
  SimpleNode jjtn000 = new SimpleNode(JJTINT_LITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Int_Literal */
  try {
/*@egen*/
  < INTEGER_LITERAL >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    tokenStr.append("int_literal ");  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}
void id(Map<String, Integer> tokenCountMap, StringBuffer tokenStr)    :
{/*@bgen(jjtree) ID */
  SimpleNode jjtn000 = new SimpleNode(JJTID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) ID */
  try {
/*@egen*/
  t = < ID >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    Integer i = tokenCountMap.get("Identifiers: " + t.image);
    if (i == null)
    {
      i = 0;
    }
    i++;
    tokenCountMap.put("Identifiers: " + t.image, i);
    tokenStr.append("id ");  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}
void assign(StringBuffer tokenStr)        :
{/*@bgen(jjtree) Assign */
  SimpleNode jjtn000 = new SimpleNode(JJTASSIGN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Assign */
  try {
/*@egen*/
  < ASSIGN >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    tokenStr.append("ASSIGN(<=) ");  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void pre(Map<String, Integer> tokenCountMap, StringBuffer tokenStr)     :
{/*@bgen(jjtree) Pre */
  SimpleNode jjtn000 = new SimpleNode(JJTPRE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Pre */
  try {
/*@egen*/
  < PRE >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    Integer i = tokenCountMap.get("Keywords: " + "pre");
    if (i == null)    {
      i = 0;    }
    i++;
    tokenCountMap.put("Keywords: " + "pre", i);
    tokenStr.append("PRE ");  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void post(Map<String, Integer> tokenCountMap, StringBuffer tokenStr)      :
{/*@bgen(jjtree) Post */
  SimpleNode jjtn000 = new SimpleNode(JJTPOST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Post */
  try {
/*@egen*/
  < POST >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    Integer i = tokenCountMap.get("Keywords: " + "post");
    if (i == null)
    {
      i = 0;
    }
    i++;
    tokenCountMap.put("Keywords: " + "post", i);
    tokenStr.append("POST ");
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void integer(Map<String, Integer> tokenCountMap, StringBuffer tokenStr)         :
{/*@bgen(jjtree) Integer */
  SimpleNode jjtn000 = new SimpleNode(JJTINTEGER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Integer */
  try {
/*@egen*/
  < INTEGER >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    Integer i = tokenCountMap.get("Keywords: " + "int");
    if (i == null)
    {
      i = 0;
    }
    i++;
    tokenCountMap.put("Keywords: " + "int", i);
    tokenStr.append("INT ");
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}
void not(StringBuffer tokenStr)     :
{/*@bgen(jjtree) Not */
  SimpleNode jjtn000 = new SimpleNode(JJTNOT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Not */
  try {
/*@egen*/
  < NOT >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {    tokenStr.append("NOT(!) ");
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}
void and(StringBuffer tokenStr)     :
{/*@bgen(jjtree) And */
  SimpleNode jjtn000 = new SimpleNode(JJTAND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) And */
  try {
/*@egen*/
  < AND >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {    tokenStr.append("AND(&&) ");
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}
void or(StringBuffer tokenStr)    :
{/*@bgen(jjtree) Or */
  SimpleNode jjtn000 = new SimpleNode(JJTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Or */
  try {
/*@egen*/
  < OR >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    tokenStr.append("OR(||) ");  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}
void plus(StringBuffer tokenStr)      :
{/*@bgen(jjtree) Plus */
  SimpleNode jjtn000 = new SimpleNode(JJTPLUS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Plus */
  try {
/*@egen*/
  < PLUS >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {    tokenStr.append("PLUS(+) ");
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}
void minus(StringBuffer tokenStr)       :
{/*@bgen(jjtree) Minus */
  SimpleNode jjtn000 = new SimpleNode(JJTMINUS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Minus */
  try {
/*@egen*/
  < MINUS >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {    tokenStr.append("MINUS(-) ");
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}
void multi(StringBuffer tokenStr)       :
{/*@bgen(jjtree) Multi */
  SimpleNode jjtn000 = new SimpleNode(JJTMULTI);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Multi */
  try {
/*@egen*/
  < MUL >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {    tokenStr.append("MULTI(*) ");
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}
void division(StringBuffer tokenStr)          :
{/*@bgen(jjtree) Division */
  SimpleNode jjtn000 = new SimpleNode(JJTDIVISION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Division */
  try {
/*@egen*/
  < DIVISION >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    tokenStr.append("DIVISION(/) ");  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}
void lessthan(StringBuffer tokenStr)          :
{/*@bgen(jjtree) Lessthan */
  SimpleNode jjtn000 = new SimpleNode(JJTLESSTHAN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Lessthan */
  try {
/*@egen*/
  < LESSTHAN >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    tokenStr.append("LESSTHAN(<) ");  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}
void largerthan(StringBuffer tokenStr)            :
{/*@bgen(jjtree) Largerthan */
  SimpleNode jjtn000 = new SimpleNode(JJTLARGERTHAN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Largerthan */
  try {
/*@egen*/
  < LARGERTHAN >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    tokenStr.append("LARGERTHAN(>) ");  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}
void dot(StringBuffer tokenStr)     :
{/*@bgen(jjtree) Dot */
  SimpleNode jjtn000 = new SimpleNode(JJTDOT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Dot */
  try {
/*@egen*/
  < DOT >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    tokenStr.append("DOT(.) ");  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}
void length(Map<String, Integer> tokenCountMap, StringBuffer tokenStr)        :
{/*@bgen(jjtree) Length */
  SimpleNode jjtn000 = new SimpleNode(JJTLENGTH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Length */
  try {
/*@egen*/
  < LENGTH >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    Integer i = tokenCountMap.get("Keywords: " + "length");
    if (i == null)
    {
      i = 0;
    }
    i++;
    tokenCountMap.put("Keywords: " + "length", i);
    tokenStr.append("LENGTH ");
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}
void _main(Map<String, Integer> tokenCountMap, StringBuffer tokenStr)      :
{/*@bgen(jjtree) Main */
  SimpleNode jjtn000 = new SimpleNode(JJTMAIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Main */
  try {
/*@egen*/
  < MAIN >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    Integer i = tokenCountMap.get("Keywords: " + "main");
    if (i == null)
    {
      i = 0;
    }
    i++;
    tokenCountMap.put("Keywords: " + "main", i);
    tokenStr.append("MAIN ");
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void _long(Map<String, Integer> tokenCountMap, StringBuffer tokenStr)      :
{/*@bgen(jjtree) Long */
  SimpleNode jjtn000 = new SimpleNode(JJTLONG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Long */
  try {
/*@egen*/
  < LONG >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    Integer i = tokenCountMap.get("Keywords: " + "long");
    if (i == null)
    {
      i = 0;
    }
    i++;
    tokenCountMap.put("Keywords: " + "long", i);
    tokenStr.append("LONG ");
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}
void _boolean(Map<String, Integer> tokenCountMap, StringBuffer tokenStr)         :
{/*@bgen(jjtree) Boolean */
  SimpleNode jjtn000 = new SimpleNode(JJTBOOLEAN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Boolean */
  try {
/*@egen*/
  < BOOLEAN >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    Integer i = tokenCountMap.get("Keywords: " + "boolean");
    if (i == null)
    {
      i = 0;
    }
    i++;
    tokenCountMap.put("Keywords: " + "boolean", i);
    tokenStr.append("BOOLEAN ");
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}
void _class(Map<String, Integer> tokenCountMap, StringBuffer tokenStr)       :
{/*@bgen(jjtree) Class */
  SimpleNode jjtn000 = new SimpleNode(JJTCLASS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Class */
  try {
/*@egen*/
  < CLASS >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    Integer i = tokenCountMap.get("Keywords: " + "class");
    if (i == null)
    {
      i = 0;
    }
    i++;
    tokenCountMap.put("Keywords: " + "class", i);
    tokenStr.append("CLASS ");
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}
void _static(Map<String, Integer> tokenCountMap, StringBuffer tokenStr)        :
{/*@bgen(jjtree) Static */
  SimpleNode jjtn000 = new SimpleNode(JJTSTATIC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Static */
  try {
/*@egen*/
  < STATIC >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    Integer i = tokenCountMap.get("Keywords: " + "static");
    if (i == null)
    {
      i = 0;
    }
    i++;
    tokenCountMap.put("Keywords: " + "static", i);
    tokenStr.append("STATIC ");
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}
void _void(Map<String, Integer> tokenCountMap, StringBuffer tokenStr)      :
{/*@bgen(jjtree) Void */
  SimpleNode jjtn000 = new SimpleNode(JJTVOID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Void */
  try {
/*@egen*/
  < VOID >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    Integer i = tokenCountMap.get("Keywords: " + "void");
    if (i == null)
    {
      i = 0;
    }
    i++;
    tokenCountMap.put("Keywords: " + "void", i);
    tokenStr.append("VOID ");
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}
void _extends(Map<String, Integer> tokenCountMap, StringBuffer tokenStr)         :
{/*@bgen(jjtree) Extends */
  SimpleNode jjtn000 = new SimpleNode(JJTEXTENDS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Extends */
  try {
/*@egen*/
  < EXTENDS >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    Integer i = tokenCountMap.get("Keywords: " + "extends");
    if (i == null)
    {
      i = 0;
    }
    i++;
    tokenCountMap.put("Keywords: " + "extends", i);
    tokenStr.append("EXTENDS ");
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}
void _return(Map<String, Integer> tokenCountMap, StringBuffer tokenStr)        :
{/*@bgen(jjtree) Return */
  SimpleNode jjtn000 = new SimpleNode(JJTRETURN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Return */
  try {
/*@egen*/
  < RETURN >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    Integer i = tokenCountMap.get("Keywords: " + "return");
    if (i == null)
    {
      i = 0;
    }
    i++;
    tokenCountMap.put("Keywords: " + "return", i);
    tokenStr.append("RETURN ");
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}
void _if(Map<String, Integer> tokenCountMap, StringBuffer tokenStr)    :
{/*@bgen(jjtree) If */
  SimpleNode jjtn000 = new SimpleNode(JJTIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) If */
  try {
/*@egen*/
  < IF >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    Integer i = tokenCountMap.get("Keywords: " + "if");
    if (i == null)
    {
      i = 0;
    }
    i++;
    tokenCountMap.put("Keywords: " + "if", i);
    tokenStr.append("IF ");
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}
void _else(Map<String, Integer> tokenCountMap, StringBuffer tokenStr)      :
{/*@bgen(jjtree) Else */
  SimpleNode jjtn000 = new SimpleNode(JJTELSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Else */
  try {
/*@egen*/
  < ELSE >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    Integer i = tokenCountMap.get("Keywords: " + "else");
    if (i == null)
    {
      i = 0;
    }
    i++;
    tokenCountMap.put("Keywords: " + "else", i);
    tokenStr.append("ELSE ");
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}
void _while(Map<String, Integer> tokenCountMap, StringBuffer tokenStr)       :
{/*@bgen(jjtree) While */
  SimpleNode jjtn000 = new SimpleNode(JJTWHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) While */
  try {
/*@egen*/
  < WHILE >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    Integer i = tokenCountMap.get("Keywords: " + "while");
    if (i == null)
    {
      i = 0;
    }
    i++;
    tokenCountMap.put("Keywords: " + "while", i);
    tokenStr.append("WHILE ");
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}
void _new(Map<String, Integer> tokenCountMap, StringBuffer tokenStr)     :
{/*@bgen(jjtree) New */
  SimpleNode jjtn000 = new SimpleNode(JJTNEW);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) New */
  try {
/*@egen*/
  < NEW >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    Integer i = tokenCountMap.get("Keywords: " + "new");
    if (i == null)
    {
      i = 0;
    }
    i++;
    tokenCountMap.put("Keywords: " + "new", i);
    tokenStr.append("NEW ");
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}
void _this(Map<String, Integer> tokenCountMap, StringBuffer tokenStr)      :
{/*@bgen(jjtree) This */
  SimpleNode jjtn000 = new SimpleNode(JJTTHIS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) This */
  try {
/*@egen*/
  < THIS >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    Integer i = tokenCountMap.get("Keywords: " + "this");
    if (i == null)
    {
      i = 0;
    }
    i++;
    tokenCountMap.put("Keywords: " + "this", i);
    tokenStr.append("THIS ");
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}
void _true(Map<String, Integer> tokenCountMap, StringBuffer tokenStr)      :
{/*@bgen(jjtree) True */
  SimpleNode jjtn000 = new SimpleNode(JJTTRUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) True */
  try {
/*@egen*/
  < TRUE >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    Integer i = tokenCountMap.get("Keywords: " + "true");
    if (i == null)
    {
      i = 0;
    }
    i++;
    tokenCountMap.put("Keywords: " + "true", i);
    tokenStr.append("TRUE ");
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}
void _false(Map<String, Integer> tokenCountMap, StringBuffer tokenStr)       :
{/*@bgen(jjtree) False */
  SimpleNode jjtn000 = new SimpleNode(JJTFALSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) False */
  try {
/*@egen*/
  < FALSE >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    Integer i = tokenCountMap.get("Keywords: " + "false");
    if (i == null)
    {
      i = 0;
    }
    i++;
    tokenCountMap.put("Keywords: " + "false", i);
    tokenStr.append("FALSE ");
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}
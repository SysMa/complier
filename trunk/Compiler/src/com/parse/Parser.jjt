/**
 * JJTree template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */
options
{
  JDK_VERSION = "1.5";
  static = false;
}

PARSER_BEGIN(Parser)
package com.parse;

import java.util.HashMap;
import java.util.Map;

public class Parser
{
  public static void main(String args [])
  {
    System.out.println("Reading from standard input...");
    System.out.print("Enter an expression like \"1+(2+3)*var;\" :");
    Map<String, Integer> tokenCountMap = new HashMap<String, Integer>();
    Parser parser = new Parser(System.in);
    try
    {
      SimpleNode n = parser.program(tokenCountMap);
      n.dump("");
      System.out.println("Thank you.");
      System.out.println(tokenCountMap);
    }
    catch (Exception e)
    {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
    }
  }
}

PARSER_END(Parser)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
| "\r\n"
| < "//"(~["\n", "\r"])*("\n" | "\r" | "\r\n") > // note of '//' 
| < "/*"(~["*"])*"*"(~["/"](~["*"])*"*")*"/" > // note of '/**/'
}

TOKEN: /* Integer literals */
{
  < INTEGER_LITERAL : ["1"-"9"](< DIGIT >)* | "0" >
}

TOKEN: /* Long literals */
{
  < LONG_LITERAL : < INTEGER_LITERAL >"L" >
}

TOKEN: /* Keywords */
{
  < LPAREN : "(" >
| < RPAREN : ")" >
| < LSQPAREN : "[" >
| < RSQPAREN : "]" >
| < LBRACE : "{" >
| < RBRACE : "}" >
| < SEMICOLON : ";" >
| < DOT : "." >
| < ASSIGN : "<=" >
| < LESSTHAN : "<" >
| < LARGERTHAN : ">">
| < PLUS : "+" >
| < MINUS : "-" >
| < MUL :"*">
| < DIVISION : "/">
| < AND : "&&" > 
| < OR : "||">
| < NOT : "!" > 
| < COMMA : ",">
| < COLON : ":">
| < BOOLEAN : "boolean" > 
| < CLASS : "class" >
| < ELSE : "else" >
| < EXTENDS : "extends" >
| < FALSE : "false" >
| < IF : "if" >
| < WHILE : "while" >
| < INTEGER : "int" > 
| < LONG : "long" >
| < NEW : "new" >
| < RETURN : "return" >
| < STATIC : "static" >
| < THIS : "this" >
| < TRUE : "true" >
| < VOID : "void" > 
| < PRE : "pre">
| < POST : "post">

| < LENGTH : "length" >
| < MAIN : "main" >
}

TOKEN: /* Identifiers */
{
  < ID : < LETTER >
| < LETTER >(< LETTER > | < DIGIT > | < UNDERSCORE >)* >
| < #DIGIT : [ "0"-"9" ] >
| < #LETTER : ["a"-"z", "A"-"Z"] >
| < #UNDERSCORE : "_" >
}

SimpleNode program(Map<String, Integer> tokenCountMap) #Program:
{
  Integer weight = 0;
  Integer count  = 0;
  Integer[] subWeight;
}
{
  subWeight = mainClass()
  {
    weight += subWeight[0];
    count  += subWeight[1];
  }
  (
    subWeight = classDecl()
    {
      weight += subWeight[0];
      count  += subWeight[1];
    }
  )*
  {
    tokenCountMap.put("$weight$", weight);
    tokenCountMap.put("$count$", count);
    return jjtThis;
  }
  < EOF >
}

Integer[] mainClass() #MainClass:
{
  Integer subWeight = 0;
  Integer count = 0;
  Integer[] temp;
}
{
  _class() id() < LBRACE >
  (
    temp = varOrMethodDecl()
    {
      subWeight += temp[0];
      count += temp[1];
    }
  )*
  _static() _void() _main()
  < LPAREN > < RPAREN > < LBRACE >
  (
    temp = statement()
    {
      subWeight += temp[0];
      count += temp[1];
    }
  )*
  < RBRACE > < RBRACE >
  {
    return new Integer[]{subWeight, count};
  }
}

Integer[] classDecl() #ClassDecl:
{
  Integer subWeight = 0;
  Integer count = 0;
  Integer[] temp;
}
{
  _class() id() (_extends() id())?
  < LBRACE >
  (
    temp = varOrMethodDecl()
    {
      subWeight += temp[0];
      count += temp[1];
    }
  )*
  < RBRACE >
  {
    return new Integer[]{subWeight, count};
  }
}

Integer[] varOrMethodDecl() #VarOrMethodDecl:
{
  Integer subWeight = 0;
  Integer count = 0;
  Integer[] temp;
}
{
  (type() | id()) id()
  (
    (
      < SEMICOLON >
    | assign()
      (
        exp()
      | < LSQPAREN > expList() < RSQPAREN >
      ) < SEMICOLON >
      {
      	return new Integer[]{1, 1};
      }
    )
    {      return new Integer[]{0, 0};
    }
  | (
	  < LPAREN > formalList() < RPAREN > < LBRACE >
	  preDecl() postDecl()
	  (
	  	temp = statement()
	  	{
	  	  subWeight += temp[0];
	  	  count += temp[1];
	  	}
	  )*
	  _return() exp()
	  {
	  	subWeight += 1;
	  	count += 1;
	  }
	  < SEMICOLON > < RBRACE >
	)
	{
	  return new Integer[]{subWeight, count};
	}
  )
}

Integer[] mid_varDecl() #VarDecl:
{}
{
  type() id()
  (
    < SEMICOLON >
  | assign()
    (
      exp()
    | < LSQPAREN > expList() < RSQPAREN >
    ) < SEMICOLON >
    {
    	return new Integer[]{1, 1};
    }
  )
  {    return new Integer[]{0, 0};
  }
}

void formalList() #FormalList:
{}
{
  (type() | id())
  id()
  (< COMMA >
  (
    type()
  | id()) id(
  ))*
}

void preDecl() #PreDecl:
{}
{
  pre() < COLON > exp() < SEMICOLON >
}

void postDecl() #PostDecl:
{}
{
  post() < COLON > exp() < SEMICOLON >
}

void type() #Type:
{}
{
  LOOKAHEAD(3)
  (
    integerArray()
  | longArray()
  )
| 
  LOOKAHEAD(1)
  (
    integer()
  | _long()
  | _boolean()
  )
}

Integer[] statement() #Statement:
{
  Integer[] temp;
  Integer subWeight = 0;
  Integer count = 0;
}
{
  temp = mid_varDecl()
  {
    return temp;
  }
| < LBRACE >
  (
    temp = statement()
    {
      subWeight += temp[0];
      count += temp[1];
    }
  )*
  < RBRACE >{return new Integer[]{subWeight, count};}
| _if()
  < LPAREN > exp() < RPAREN > 
  temp = statement()
  {
    subWeight = temp[0];
    count += temp[1];
  }
  _else()
  temp = statement()
  {
    subWeight += temp[0];
    count += temp[1];
    subWeight = subWeight * 2;
    return new Integer[]{subWeight, count};
  }
| _while()
  < LPAREN > exp() < RPAREN >
  temp = statement()
  {
    subWeight = temp[0] * 4;
    count = temp[1];
    return new Integer[]{subWeight, count};
  }
| id()
  (
    (
      id()
      (
        < SEMICOLON >
        | assign()
        (
          exp()
        | < LSQPAREN > expList() < RSQPAREN >
        ) < SEMICOLON >
        {
    		return new Integer[]{1, 1};
  		}
      )
      {
        return new Integer[]{0, 0};      }
    )
  | (
      (assign() exp() < SEMICOLON >)
    | (< LSQPAREN > exp() < RSQPAREN > assign() exp() < SEMICOLON >)
  	)
  	{
    	return new Integer[]{1, 1};
  	}
  )
}

void exp() #Exp:
{}
{
  _new()
  (
    (
      (integer()
    | _long())
    < LSQPAREN > exp() < RSQPAREN >
    )
  | id() < LPAREN > < RPAREN >
  )
| lowLevelExp()
| < NOT > exp()
}

void lowLevelExp() #LowLevelExp:
{}
{
  highLevelExp()
  (
    (
      and()
    | or()
    | plus()
    | minus()
    )  
    highLevelExp()
  )*
}

void highLevelExp() #HighLevelExp:
{}
{
  unaryExp()
  (
    (
      lessthan()
    | largerthan()
    | multi()
    | division()
    )
    unaryExp()
  )*
} 

void unaryExp() #UnaryExp:
{}
{
(
  long_literal()
| int_literal()
| _true()
| _false()
| id()
| _this()
| < LPAREN > exp() < RPAREN >
)
  (
    (
      < LSQPAREN > exp() < RSQPAREN >
    | dot()
      (
        length()
      | id() < LPAREN > expList() < RPAREN >
      )
    )
  )?
}

void expList() #ExpList:
{}
{
  exp()
  (< COMMA > exp())*
}

void long_literal() #Long_Literal:
{}
{
  < LONG_LITERAL >
}
void int_literal() #Int_Literal:
{}
{
  < INTEGER_LITERAL >
}
void id() #ID:
{}
{
  < ID >
}
void assign() #Assign:
{}
{
  < ASSIGN >
}
void pre() #Pre:
{}
{
  < PRE >
}
void post() #Post:
{}
{
  < POST >
}
void integer() #Integer:
{}
{
  < INTEGER >
}
void integerArray() #IntegerArray:
{}
{
  < INTEGER > < LSQPAREN > < RSQPAREN >
}
void not() #Not:
{}
{
  < NOT >
}
void and() #And:
{}
{
  < AND >
}
void or() #Or:
{}
{
  < OR >
}
void plus() #Plus:
{}
{
  < PLUS >
}
void minus() #Minus:
{}
{
  < MINUS >
}
void multi() #Multi:
{}
{
  < MUL >
}
void division() #Division:
{}
{
  < DIVISION >
}
void lessthan() #Lessthan:
{}
{
  < LESSTHAN >
}
void largerthan() #Largerthan:
{}
{
  < LARGERTHAN >
}
void dot() #Dot:
{}
{
  < DOT >
}
void length() #Length:
{}
{
  < LENGTH >
}
void _main() #Main:
{}
{
  < MAIN >
}
void _long() #Long:
{}
{
  < LONG >
}
void longArray() #LongArray:
{}
{
  < LONG > < LSQPAREN > < RSQPAREN >
}
void _boolean() #Boolean:
{}
{
  < BOOLEAN >
}
void _class() #Class:
{}
{
  < CLASS >
}
void _static() #Static:
{}
{
  < STATIC >
}
void _void() #Void:
{}
{
  < VOID >
}
void _extends() #Extends:
{}
{
  < EXTENDS >
}
void _return() #Return:
{}
{
  < RETURN >
}
void _if() #If:
{}
{
  < IF >
}
void _else() #Else:
{}
{
  < ELSE >
}
void _while() #While:
{}
{
  < WHILE >
}
void _new() #New:
{}
{
  < NEW >
}
void _this() #This:
{}
{
  < THIS >
}
void _true() #True:
{}
{
  < TRUE >
}
void _false() #False:
{}
{
  < FALSE >
}
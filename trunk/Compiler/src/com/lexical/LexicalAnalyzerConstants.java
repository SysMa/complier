package com.lexical;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface LexicalAnalyzerConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SPACE = 3;
  /** RegularExpression Id. */
  int TAB = 4;
  /** RegularExpression Id. */
  int EOL = 5;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 6;
  /** RegularExpression Id. */
  int LONG_LITERAL = 7;
  /** RegularExpression Id. */
  int LPAREN = 8;
  /** RegularExpression Id. */
  int RPAREN = 9;
  /** RegularExpression Id. */
  int LSQPAREN = 10;
  /** RegularExpression Id. */
  int RSQPAREN = 11;
  /** RegularExpression Id. */
  int LBRACE = 12;
  /** RegularExpression Id. */
  int RBRACE = 13;
  /** RegularExpression Id. */
  int SEMICOLON = 14;
  /** RegularExpression Id. */
  int DOT = 15;
  /** RegularExpression Id. */
  int ASSIGN = 16;
  /** RegularExpression Id. */
  int LESSTHAN = 17;
  /** RegularExpression Id. */
  int LARGERTHAN = 18;
  /** RegularExpression Id. */
  int PLUS = 19;
  /** RegularExpression Id. */
  int MINUS = 20;
  /** RegularExpression Id. */
  int MUL = 21;
  /** RegularExpression Id. */
  int DIVISION = 22;
  /** RegularExpression Id. */
  int AND = 23;
  /** RegularExpression Id. */
  int OR = 24;
  /** RegularExpression Id. */
  int NOT = 25;
  /** RegularExpression Id. */
  int COMMA = 26;
  /** RegularExpression Id. */
  int COLON = 27;
  /** RegularExpression Id. */
  int BOOLEAN = 28;
  /** RegularExpression Id. */
  int CLASS = 29;
  /** RegularExpression Id. */
  int ELSE = 30;
  /** RegularExpression Id. */
  int EXTENDS = 31;
  /** RegularExpression Id. */
  int FALSE = 32;
  /** RegularExpression Id. */
  int IF = 33;
  /** RegularExpression Id. */
  int WHILE = 34;
  /** RegularExpression Id. */
  int INTEGER = 35;
  /** RegularExpression Id. */
  int LONG = 36;
  /** RegularExpression Id. */
  int NEW = 37;
  /** RegularExpression Id. */
  int RETURN = 38;
  /** RegularExpression Id. */
  int STATIC = 39;
  /** RegularExpression Id. */
  int THIS = 40;
  /** RegularExpression Id. */
  int TRUE = 41;
  /** RegularExpression Id. */
  int VOID = 42;
  /** RegularExpression Id. */
  int PRE = 43;
  /** RegularExpression Id. */
  int POST = 44;
  /** RegularExpression Id. */
  int LENGTH = 45;
  /** RegularExpression Id. */
  int MAIN = 46;
  /** RegularExpression Id. */
  int ID = 47;
  /** RegularExpression Id. */
  int DIGIT = 48;
  /** RegularExpression Id. */
  int LETTER = 49;
  /** RegularExpression Id. */
  int UNDERSCORE = 50;
  /** RegularExpression Id. */
  int ILL_ID = 51;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<token of kind 1>",
    "<token of kind 2>",
    "\" \"",
    "\"\\t\"",
    "<EOL>",
    "<INTEGER_LITERAL>",
    "<LONG_LITERAL>",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\";\"",
    "\".\"",
    "\"<=\"",
    "\"<\"",
    "\">\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"&&\"",
    "\"||\"",
    "\"!\"",
    "\",\"",
    "\":\"",
    "\"boolean\"",
    "\"class\"",
    "\"else\"",
    "\"extends\"",
    "\"false\"",
    "\"if\"",
    "\"while\"",
    "\"int\"",
    "\"long\"",
    "\"new\"",
    "\"return\"",
    "\"static\"",
    "\"this\"",
    "\"true\"",
    "\"void\"",
    "\"pre\"",
    "\"post\"",
    "\"length\"",
    "\"main\"",
    "<ID>",
    "<DIGIT>",
    "<LETTER>",
    "\"_\"",
    "<ILL_ID>",
  };

}

/**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */options{  JDK_VERSION = "1.5";  static = false;}PARSER_BEGIN(LexicalAnalyzer)
package com.lexical;

import java.util.HashMap;
import java.util.Map;
public class LexicalAnalyzer{  public static void main(String args []) throws ParseException  {    LexicalAnalyzer parser = new LexicalAnalyzer(System.in);
    Map<String, Integer> tokenCountMap = new HashMap<String, Integer>();
    StringBuffer tokenStr = new StringBuffer("");    while (true)    {      System.out.println("Reading from standard input...");      System.out.print("Enter an expression like \"1+(2+3)*4;\" :");      try      {        parser.program(tokenCountMap, tokenStr);      }      catch (Exception e)      {        System.out.println("NOK.");        System.out.println(e.getMessage());        parser.ReInit(System.in);      }      catch (Error e)      {        System.out.println("Oops.");        System.out.println(e.getMessage());        break;      }    }  }}PARSER_END(LexicalAnalyzer)SKIP :
{
  < "//"(~["\n", "\r"])*("\n" | "\r" | "\r\n") > // note of '//' 
| < "/*"(~["*"])*"*"(~["/"](~["*"])*"*")*"/" > // note of '/**/'
}

TOKEN: /* Space and tab */
{
  < SPACE : " " >
| < TAB : "\t" >}

TOKEN: /* End of line */
{
  <  EOL : "\n" | "\r\n" | "\r" >}

TOKEN: /* Integer literals */
{
  < INTEGER_LITERAL : ["1"-"9"](< DIGIT >)* | "0" >
}

TOKEN: /* Long literals */
{
  < LONG_LITERAL : < INTEGER_LITERAL >"L" >
}

TOKEN: /* Keywords */
{
  < LPAREN : "(" >
| < RPAREN : ")" >
| < LSQPAREN : "[" >
| < RSQPAREN : "]" >
| < LBRACE : "{" >
| < RBRACE : "}" >
| < SEMICOLON : ";" >
| < DOT : "." >
| < ASSIGN : "<=" >
| < LESSTHAN : "<" >
| < LARGERTHAN : ">">
| < PLUS : "+" >
| < MINUS : "-" >
| < MUL :"*">
| < DIVISION : "/">
| < AND : "&&" > 
| < OR : "||">
| < NOT : "!" > 
| < COMMA : ",">
| < COLON : ":">
| < BOOLEAN : "boolean" > 
| < CLASS : "class" >
| < ELSE : "else" >
| < EXTENDS : "extends" >
| < FALSE : "false" >
| < IF : "if" >
| < WHILE : "while" >
| < INTEGER : "int" > 
| < LONG : "long" >
| < NEW : "new" >
| < RETURN : "return" >
| < STATIC : "static" >
| < THIS : "this" >
| < TRUE : "true" >
| < VOID : "void" > 
| < PRE : "pre">
| < POST : "post">

| < LENGTH : "length" >
| < MAIN : "main" >
}

TOKEN: /* Identifiers */
{
  < ID : < LETTER >
| < LETTER >(< LETTER > | < DIGIT > | < UNDERSCORE >)* >
| < #DIGIT : [ "0"-"9" ] >
| < #LETTER : ["a"-"z", "A"-"Z"] >
| < #UNDERSCORE : "_" >
}

TOKEN: /* Illegal identifiers */
{
  < ILL_ID : < DIGIT >(< LETTER > | < DIGIT > | < UNDERSCORE >)* >}

void program(Map<String, Integer> tokenCountMap, StringBuffer tokenStr):
{}
{
  mainClass(tokenCountMap, tokenStr)
  (classDecl(tokenCountMap, tokenStr))*
  < EOF >
}

void mainClass(Map<String, Integer> tokenCountMap, StringBuffer tokenStr):
{}
{
  _class(tokenCountMap, tokenStr) id(tokenCountMap, tokenStr)
  < LBRACE >{tokenStr.append("LBRACE({)\n");}
  (varOrMethodDecl(tokenCountMap, tokenStr))*
  _static(tokenCountMap, tokenStr) _void(tokenCountMap, tokenStr)
  _main(tokenCountMap, tokenStr)
  < LPAREN >{tokenStr.append("LPAREN(() ");}
  < RPAREN >{tokenStr.append("RPAREN()) ");}
  < LBRACE >{tokenStr.append("LBRACE({)\n");}
  (statement(tokenCountMap, tokenStr))*
  < RBRACE >{tokenStr.append("RBRACE(})\n");}
  < RBRACE >{tokenStr.append("RBRACE(})\n");}
}

void classDecl(Map<String, Integer> tokenCountMap, StringBuffer tokenStr):
{}
{
  _class(tokenCountMap, tokenStr) id(tokenCountMap, tokenStr)
  (_extends(tokenCountMap, tokenStr) id(tokenCountMap, tokenStr))?
  < LBRACE >{tokenStr.append("LBRACE({)\n");}
  (varOrMethodDecl(tokenCountMap, tokenStr))*
  < RBRACE >{tokenStr.append("RBRACE(})\n");}
}

void varOrMethodDecl(Map<String, Integer> tokenCountMap, StringBuffer tokenStr):
{}
{
  (type(tokenCountMap, tokenStr) | id(tokenCountMap, tokenStr))
  id(tokenCountMap, tokenStr)
  (
    (
      < SEMICOLON >{tokenStr.append("SEMICOLON(;)\n");}
    | assign(tokenStr)
      (
        exp(tokenCountMap, tokenStr)
      | < LSQPAREN >{tokenStr.append("LSQPAREN([) ");}
        expList(tokenCountMap, tokenStr)
        < RSQPAREN >{tokenStr.append("RSQPAREN(]) ");}
      ) < SEMICOLON >{tokenStr.append("SEMICOLON(;)\n");}
    )
  | (
	  < LPAREN >{tokenStr.append("LPAREN(() ");}
	  formalList(tokenCountMap, tokenStr)
	  < RPAREN >{tokenStr.append("RPAREN()) ");}
	  < LBRACE >{tokenStr.append("LBRACE({)\n");}
	  preDecl(tokenCountMap, tokenStr) postDecl(tokenCountMap, tokenStr)
	  (statement(tokenCountMap, tokenStr))*
	  _return(tokenCountMap, tokenStr)
	  exp(tokenCountMap, tokenStr)
	  < SEMICOLON >{tokenStr.append("SEMICOLON(;)\n");}
	  < RBRACE >{tokenStr.append("RBRACE(})\n");}
	)
  )
}

void mid_varDecl(Map<String, Integer> tokenCountMap, StringBuffer tokenStr):
{}
{
  type(tokenCountMap, tokenStr) id(tokenCountMap, tokenStr)
  (
    < SEMICOLON >{tokenStr.append("SEMICOLON(;)\n");}
  | assign(tokenStr)
    (
      exp(tokenCountMap, tokenStr)
    | < LSQPAREN >{tokenStr.append("LSQPAREN([) ");}
      expList(tokenCountMap, tokenStr)
      < RSQPAREN >{tokenStr.append("RSQPAREN(]) ");}
    ) < SEMICOLON >{tokenStr.append("SEMICOLON(;)\n");}
  )
}

void formalList(Map<String, Integer> tokenCountMap, StringBuffer tokenStr):
{}
{
  (type(tokenCountMap, tokenStr) | id(tokenCountMap, tokenStr))
  id(tokenCountMap, tokenStr)
  (< COMMA >{tokenStr.append("COMMA(,) ");}
  (
    type(tokenCountMap, tokenStr)
  | id(tokenCountMap, tokenStr)) id(tokenCountMap, tokenStr
  ))*
}

void preDecl(Map<String, Integer> tokenCountMap, StringBuffer tokenStr):
{}
{
  pre(tokenCountMap, tokenStr) < COLON >{tokenStr.append("COLON(:) ");}
  exp(tokenCountMap, tokenStr) < SEMICOLON >{tokenStr.append("SEMICOLON(;)\n");}
}

void postDecl(Map<String, Integer> tokenCountMap, StringBuffer tokenStr):
{}
{
  post(tokenCountMap, tokenStr) < COLON >{tokenStr.append("COLON(:) ");}
  exp(tokenCountMap, tokenStr) < SEMICOLON >{tokenStr.append("SEMICOLON(;)\n");}
}

void type(Map<String, Integer> tokenCountMap, StringBuffer tokenStr):
{}
{
  LOOKAHEAD(3)
  (
    integerArray(tokenCountMap, tokenStr)
  | longArray(tokenCountMap, tokenStr)
  )
| 
  LOOKAHEAD(1)
  (
    integer(tokenCountMap, tokenStr)
  | _long(tokenCountMap, tokenStr)
  | _boolean(tokenCountMap, tokenStr)
  )
}

void statement(Map<String, Integer> tokenCountMap, StringBuffer tokenStr):
{}
{
  mid_varDecl(tokenCountMap, tokenStr)
| < LBRACE >{tokenStr.append("LBRACE({) ");}
  (statement(tokenCountMap, tokenStr))*
  < RBRACE >{tokenStr.append("RBRACE(}) ");}
| _if(tokenCountMap, tokenStr)
  < LPAREN > {tokenStr.append("LPAREN(() ");} exp(tokenCountMap, tokenStr)
  < RPAREN > {tokenStr.append("RPAREN()) ");}
  statement(tokenCountMap, tokenStr)
  _else(tokenCountMap, tokenStr)
  statement(tokenCountMap, tokenStr)
| _while(tokenCountMap, tokenStr)
  < LPAREN >{tokenStr.append("LPAREN(() ");} exp(tokenCountMap, tokenStr)
  < RPAREN >{tokenStr.append("RPAREN()) ");}
  statement(tokenCountMap, tokenStr)
| id(tokenCountMap, tokenStr)
  (
    (
      id(tokenCountMap, tokenStr)
      (
        < SEMICOLON >{tokenStr.append("SEMICOLON(;)\n");}
        | assign(tokenStr)
        (
          exp(tokenCountMap, tokenStr)
        | < LSQPAREN >{tokenStr.append("LSQRAREN([) ");}
          expList(tokenCountMap, tokenStr)
          < RSQPAREN >{tokenStr.append("RSQPAREN(]) ");}
        ) < SEMICOLON >{tokenStr.append("SEMICOLON(;)\n");}
      )
    )
  | (
      (assign(tokenStr) exp(tokenCountMap, tokenStr) < SEMICOLON >)
    | (
      < LSQPAREN >{tokenStr.append("LSQPAREN([) ");}
      exp(tokenCountMap, tokenStr)
      < RSQPAREN >{tokenStr.append("RSQPAREN(]) ");}
      assign(tokenStr) exp(tokenCountMap, tokenStr)
      < SEMICOLON >{tokenStr.append("SEMICOLON(;)\n");})
  	)
  )
}

void exp(Map<String, Integer> tokenCountMap, StringBuffer tokenStr):
{}
{
  _new(tokenCountMap, tokenStr)
  (
    (
      (integer(tokenCountMap, tokenStr)
    | _long(tokenCountMap, tokenStr))
      < LSQPAREN >{tokenStr.append("LSQPAREN([) ");}
      exp(tokenCountMap, tokenStr)
      < RSQPAREN >{tokenStr.append("RSQPAREN(]) ");}
    )
  | (id(tokenCountMap, tokenStr)
    < LPAREN >{tokenStr.append("LPAREN(() ");}
    < RPAREN >{tokenStr.append("RPAREN()) ");})
  )
| lowLevelExp(tokenCountMap, tokenStr)
| not(tokenStr) exp(tokenCountMap, tokenStr)
}

void lowLevelExp(Map<String, Integer> tokenCountMap, StringBuffer tokenStr):
{}
{
  highLevelExp(tokenCountMap, tokenStr)
  (
    (
      and(tokenStr)
    | or(tokenStr)
    | plus(tokenStr)
    | minus(tokenStr)
    )  
    highLevelExp(tokenCountMap, tokenStr)
  )*
}

void highLevelExp(Map<String, Integer> tokenCountMap, StringBuffer tokenStr):
{}
{
  unaryExp(tokenCountMap, tokenStr)
  (
    (
      lessthan(tokenStr)
    | largerthan(tokenStr)
    | multi(tokenStr)
    | division(tokenStr)
    )
    unaryExp(tokenCountMap, tokenStr)
  )*
}

void unaryExp(Map<String, Integer> tokenCountMap, StringBuffer tokenStr):
{}
{
(
  long_literal(tokenStr)
| int_literal(tokenStr)
| _true(tokenCountMap, tokenStr)
| _false(tokenCountMap, tokenStr)
| id(tokenCountMap, tokenStr)
| _this(tokenCountMap, tokenStr)
| < LPAREN >{tokenStr.append("LPAREN(() ");}
  exp(tokenCountMap, tokenStr)
  < RPAREN >{tokenStr.append("RPAREN()) ");}
)
  (
    (
      < LSQPAREN >{tokenStr.append("LSQPAREN([) ");}
      exp(tokenCountMap, tokenStr)
      < RSQPAREN >{tokenStr.append("RSQPAREN(]) ");}
    | dot(tokenStr)
      (
        length(tokenCountMap, tokenStr) | id(tokenCountMap, tokenStr)
        < LPAREN >{tokenStr.append("LPAREN(() ");}
        expList(tokenCountMap, tokenStr)
        < RPAREN >{tokenStr.append("RPAREN()) ");}
      )
    )
  )?
}

void expList(Map<String, Integer> tokenCountMap, StringBuffer tokenStr):
{}
{
  exp(tokenCountMap, tokenStr)
  (< COMMA >
  {
    tokenStr.append("COMMA(,) ");
  }
  exp(tokenCountMap, tokenStr))*
}

void long_literal(StringBuffer tokenStr):
{}
{
  < LONG_LITERAL >
  {
    tokenStr.append("long_literal ");
  }
}
void int_literal(StringBuffer tokenStr):
{}
{
  < INTEGER_LITERAL >
  {
    tokenStr.append("int_literal ");
  }
}
void id(Map<String, Integer> tokenCountMap, StringBuffer tokenStr):
{
  Token t;
}
{
  t = < ID >
  {
    Integer i = tokenCountMap.get("Identifiers: " + t.image);
    if (i == null)
    {
      i = 0;
    }
    i++;
    tokenCountMap.put("Identifiers: " + t.image, i);
    tokenStr.append("id ");
  }
}
void assign(StringBuffer tokenStr):
{}
{
  < ASSIGN >
  {
    tokenStr.append("ASSIGN(<=) ");
  }
}
void pre(Map<String, Integer> tokenCountMap, StringBuffer tokenStr):
{}
{
  < PRE >
  {
    Integer i = tokenCountMap.get("Keywords: " + "pre");
    if (i == null)
    {
      i = 0;
    }
    i++;
    tokenCountMap.put("Keywords: " + "pre", i);
    tokenStr.append("PRE ");
  }
}
void post(Map<String, Integer> tokenCountMap, StringBuffer tokenStr):
{}
{
  < POST >
  {
    Integer i = tokenCountMap.get("Keywords: " + "post");
    if (i == null)
    {
      i = 0;
    }
    i++;
    tokenCountMap.put("Keywords: " + "post", i);
    tokenStr.append("POST ");
  }
}
void integer(Map<String, Integer> tokenCountMap, StringBuffer tokenStr):
{}
{
  < INTEGER >
  {
    Integer i = tokenCountMap.get("Keywords: " + "int");
    if (i == null)
    {
      i = 0;
    }
    i++;
    tokenCountMap.put("Keywords: " + "int", i);
    tokenStr.append("INT ");
  }
}
void integerArray(Map<String, Integer> tokenCountMap, StringBuffer tokenStr):
{}
{
  < INTEGER > < LSQPAREN > < RSQPAREN >
  {
    Integer i = tokenCountMap.get("Keywords: " + "int");
    if (i == null)
    {
      i = 0;
    }
    i++;
    tokenCountMap.put("Keywords: " + "int", i);
    tokenStr.append("INTARRAY ");
  }
}
void not(StringBuffer tokenStr):
{}
{
  < NOT >
  {
    tokenStr.append("NOT(!) ");
  }
}
void and(StringBuffer tokenStr):
{}
{
  < AND >
  {
    tokenStr.append("AND(&&) ");
  }
}
void or(StringBuffer tokenStr):
{}
{
  < OR >
  {
    tokenStr.append("OR(||) ");
  }
}
void plus(StringBuffer tokenStr):
{}
{
  < PLUS >
  {
    tokenStr.append("PLUS(+) ");
  }
}
void minus(StringBuffer tokenStr):
{}
{
  < MINUS >
  {
    tokenStr.append("MINUS(-) ");
  }
}
void multi(StringBuffer tokenStr):
{}
{
  < MUL >
  {
    tokenStr.append("MULTI(*) ");
  }
}
void division(StringBuffer tokenStr):
{}
{
  < DIVISION >
  {
    tokenStr.append("DIVISION(/) ");
  }
}
void lessthan(StringBuffer tokenStr):
{}
{
  < LESSTHAN >
  {
    tokenStr.append("LESSTHAN(<) ");
  }
}
void largerthan(StringBuffer tokenStr):
{}
{
  < LARGERTHAN >
  {
    tokenStr.append("LARGERTHAN(>) ");
  }
}
void dot(StringBuffer tokenStr):
{}
{
  < DOT >
  {
    tokenStr.append("DOT(.) ");
  }
}
void length(Map<String, Integer> tokenCountMap, StringBuffer tokenStr):
{}
{
  < LENGTH >
  {
    Integer i = tokenCountMap.get("Keywords: " + "length");
    if (i == null)
    {
      i = 0;
    }
    i++;
    tokenCountMap.put("Keywords: " + "length", i);
    tokenStr.append("LENGTH ");
  }
}
void _main(Map<String, Integer> tokenCountMap, StringBuffer tokenStr):
{}
{
  < MAIN >
  {
    Integer i = tokenCountMap.get("Keywords: " + "main");
    if (i == null)
    {
      i = 0;
    }
    i++;
    tokenCountMap.put("Keywords: " + "main", i);
    tokenStr.append("MAIN ");
  }
}
void _long(Map<String, Integer> tokenCountMap, StringBuffer tokenStr):
{}
{
  < LONG >
  {
    Integer i = tokenCountMap.get("Keywords: " + "long");
    if (i == null)
    {
      i = 0;
    }
    i++;
    tokenCountMap.put("Keywords: " + "long", i);
    tokenStr.append("LONG ");
  }
}
void longArray(Map<String, Integer> tokenCountMap, StringBuffer tokenStr):
{}
{
  < LONG > < LSQPAREN > < RSQPAREN >
  {
    Integer i = tokenCountMap.get("Keywords: " + "long");
    if (i == null)
    {
      i = 0;
    }
    i++;
    tokenCountMap.put("Keywords: " + "long", i);
    tokenStr.append("LONGARRAY ");
  }
}
void _boolean(Map<String, Integer> tokenCountMap, StringBuffer tokenStr):
{}
{
  < BOOLEAN >
  {
    Integer i = tokenCountMap.get("Keywords: " + "boolean");
    if (i == null)
    {
      i = 0;
    }
    i++;
    tokenCountMap.put("Keywords: " + "boolean", i);
    tokenStr.append("BOOLEAN ");
  }
}
void _class(Map<String, Integer> tokenCountMap, StringBuffer tokenStr):
{}
{
  < CLASS >
  {
    Integer i = tokenCountMap.get("Keywords: " + "class");
    if (i == null)
    {
      i = 0;
    }
    i++;
    tokenCountMap.put("Keywords: " + "class", i);
    tokenStr.append("CLASS ");
  }
}
void _static(Map<String, Integer> tokenCountMap, StringBuffer tokenStr):
{}
{
  < STATIC >
  {
    Integer i = tokenCountMap.get("Keywords: " + "static");
    if (i == null)
    {
      i = 0;
    }
    i++;
    tokenCountMap.put("Keywords: " + "static", i);
    tokenStr.append("STATIC ");
  }
}
void _void(Map<String, Integer> tokenCountMap, StringBuffer tokenStr):
{}
{
  < VOID >
  {
    Integer i = tokenCountMap.get("Keywords: " + "void");
    if (i == null)
    {
      i = 0;
    }
    i++;
    tokenCountMap.put("Keywords: " + "void", i);
    tokenStr.append("VOID ");
  }
}
void _extends(Map<String, Integer> tokenCountMap, StringBuffer tokenStr):
{}
{
  < EXTENDS >
  {
    Integer i = tokenCountMap.get("Keywords: " + "extends");
    if (i == null)
    {
      i = 0;
    }
    i++;
    tokenCountMap.put("Keywords: " + "extends", i);
    tokenStr.append("EXTENDS ");
  }
}
void _return(Map<String, Integer> tokenCountMap, StringBuffer tokenStr):
{}
{
  < RETURN >
  {
    Integer i = tokenCountMap.get("Keywords: " + "return");
    if (i == null)
    {
      i = 0;
    }
    i++;
    tokenCountMap.put("Keywords: " + "return", i);
    tokenStr.append("RETURN ");
  }
}
void _if(Map<String, Integer> tokenCountMap, StringBuffer tokenStr):
{}
{
  < IF >
  {
    Integer i = tokenCountMap.get("Keywords: " + "if");
    if (i == null)
    {
      i = 0;
    }
    i++;
    tokenCountMap.put("Keywords: " + "if", i);
    tokenStr.append("IF ");
  }
}
void _else(Map<String, Integer> tokenCountMap, StringBuffer tokenStr):
{}
{
  < ELSE >
  {
    Integer i = tokenCountMap.get("Keywords: " + "else");
    if (i == null)
    {
      i = 0;
    }
    i++;
    tokenCountMap.put("Keywords: " + "else", i);
    tokenStr.append("ELSE ");
  }
}
void _while(Map<String, Integer> tokenCountMap, StringBuffer tokenStr):
{}
{
  < WHILE >
  {
    Integer i = tokenCountMap.get("Keywords: " + "while");
    if (i == null)
    {
      i = 0;
    }
    i++;
    tokenCountMap.put("Keywords: " + "while", i);
    tokenStr.append("WHILE ");
  }
}
void _new(Map<String, Integer> tokenCountMap, StringBuffer tokenStr):
{}
{
  < NEW >
  {
    Integer i = tokenCountMap.get("Keywords: " + "new");
    if (i == null)
    {
      i = 0;
    }
    i++;
    tokenCountMap.put("Keywords: " + "new", i);
    tokenStr.append("NEW ");
  }
}
void _this(Map<String, Integer> tokenCountMap, StringBuffer tokenStr):
{}
{
  < THIS >
  {
    Integer i = tokenCountMap.get("Keywords: " + "this");
    if (i == null)
    {
      i = 0;
    }
    i++;
    tokenCountMap.put("Keywords: " + "this", i);
    tokenStr.append("THIS ");
  }
}
void _true(Map<String, Integer> tokenCountMap, StringBuffer tokenStr):
{}
{
  < TRUE >
  {
    Integer i = tokenCountMap.get("Keywords: " + "true");
    if (i == null)
    {
      i = 0;
    }
    i++;
    tokenCountMap.put("Keywords: " + "true", i);
    tokenStr.append("TRUE ");
  }
}
void _false(Map<String, Integer> tokenCountMap, StringBuffer tokenStr):
{}
{
  < FALSE >
  {
    Integer i = tokenCountMap.get("Keywords: " + "false");
    if (i == null)
    {
      i = 0;
    }
    i++;
    tokenCountMap.put("Keywords: " + "false", i);
    tokenStr.append("FALSE ");
  }
}